{"ast":null,"code":"/*\n\nCopyright <holder> All Rights Reserved\n\nSPDX-License-Identifier: Apache-2.0\n\n*/\nimport { SUB_LIST_IS_FETCHING, SUB_LIST_FETCHED, SUB_LIST_FILTER } from \"../../constants/actionTypes\";\nconst initialState = {\n  subList: [],\n  total: 0,\n  filteredList: [],\n  isLoading: false,\n  errorMessage: \"\",\n  keyword: \"\"\n};\n\nconst getFilteredList = (subList, keyword) => {\n  return subList.filter(item => item.ID.toString().indexOf(keyword) > -1 || item.Name.toLowerCase().indexOf(keyword) > -1 || item.Network.toLowerCase().indexOf(keyword) > -1 || item.Network.toLowerCase().indexOf(keyword) > -1 || item.Vlan.toString().indexOf(keyword) > -1 //   ||\n  //   item.OwnerInfo.name.toLowerCase().indexOf(keyword) > -1 ||\n  //   item.Netlink.Hyper.toString().indexOf(keyword) > -1 ||\n  //   item.Zones.map((val) => {\n  //     return val.Name.toLowerCase().indexOf(keyword) > -1;\n  //   })\n  );\n};\n\nexport default function SubReducer(state = initialState, action) {\n  switch (action.type) {\n    case SUB_LIST_IS_FETCHING:\n      return { ...state,\n        isLoading: action.loading\n      };\n\n    case SUB_LIST_FETCHED:\n      return { ...state,\n        // isLoading: action.loading,\n        subList: action.subList,\n        filteredList: getFilteredList(action.subList, state.keyword)\n      };\n\n    case SUB_LIST_FILTER:\n      return { ...state,\n        keyword: action.keyword,\n        filteredList: getFilteredList(state.subList, action.keyword)\n      };\n\n    default:\n      return state;\n  }\n}\n_c = SubReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubReducer\");","map":{"version":3,"sources":["/Users/emily/cloudland/src/redux/reducers/SubReducer.jsx"],"names":["SUB_LIST_IS_FETCHING","SUB_LIST_FETCHED","SUB_LIST_FILTER","initialState","subList","total","filteredList","isLoading","errorMessage","keyword","getFilteredList","filter","item","ID","toString","indexOf","Name","toLowerCase","Network","Vlan","SubReducer","state","action","type","loading"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACEA,oBADF,EAEEC,gBAFF,EAGEC,eAHF,QAIO,6BAJP;AAMA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,KAAK,EAAE,CAFY;AAGnBC,EAAAA,YAAY,EAAE,EAHK;AAInBC,EAAAA,SAAS,EAAE,KAJQ;AAKnBC,EAAAA,YAAY,EAAE,EALK;AAMnBC,EAAAA,OAAO,EAAE;AANU,CAArB;;AAQA,MAAMC,eAAe,GAAG,CAACN,OAAD,EAAUK,OAAV,KAAsB;AAC5C,SAAOL,OAAO,CAACO,MAAR,CACJC,IAAD,IACEA,IAAI,CAACC,EAAL,CAAQC,QAAR,GAAmBC,OAAnB,CAA2BN,OAA3B,IAAsC,CAAC,CAAvC,IACAG,IAAI,CAACI,IAAL,CAAUC,WAAV,GAAwBF,OAAxB,CAAgCN,OAAhC,IAA2C,CAAC,CAD5C,IAEAG,IAAI,CAACM,OAAL,CAAaD,WAAb,GAA2BF,OAA3B,CAAmCN,OAAnC,IAA8C,CAAC,CAF/C,IAGAG,IAAI,CAACM,OAAL,CAAaD,WAAb,GAA2BF,OAA3B,CAAmCN,OAAnC,IAA8C,CAAC,CAH/C,IAIAG,IAAI,CAACO,IAAL,CAAUL,QAAV,GAAqBC,OAArB,CAA6BN,OAA7B,IAAwC,CAAC,CANtC,CAOL;AACA;AACA;AACA;AACA;AACA;AAZK,GAAP;AAcD,CAfD;;AAgBA,eAAe,SAASW,UAAT,CAAoBC,KAAK,GAAGlB,YAA5B,EAA0CmB,MAA1C,EAAkD;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKvB,oBAAL;AACE,aAAO,EACL,GAAGqB,KADE;AAELd,QAAAA,SAAS,EAAEe,MAAM,CAACE;AAFb,OAAP;;AAIF,SAAKvB,gBAAL;AACE,aAAO,EACL,GAAGoB,KADE;AAEL;AACAjB,QAAAA,OAAO,EAAEkB,MAAM,CAAClB,OAHX;AAILE,QAAAA,YAAY,EAAEI,eAAe,CAACY,MAAM,CAAClB,OAAR,EAAiBiB,KAAK,CAACZ,OAAvB;AAJxB,OAAP;;AAMF,SAAKP,eAAL;AACE,aAAO,EACL,GAAGmB,KADE;AAELZ,QAAAA,OAAO,EAAEa,MAAM,CAACb,OAFX;AAGLH,QAAAA,YAAY,EAAEI,eAAe,CAACW,KAAK,CAACjB,OAAP,EAAgBkB,MAAM,CAACb,OAAvB;AAHxB,OAAP;;AAKF;AACE,aAAOY,KAAP;AApBJ;AAsBD;KAvBuBD,U","sourcesContent":["/*\n\nCopyright <holder> All Rights Reserved\n\nSPDX-License-Identifier: Apache-2.0\n\n*/\nimport {\n  SUB_LIST_IS_FETCHING,\n  SUB_LIST_FETCHED,\n  SUB_LIST_FILTER,\n} from \"../../constants/actionTypes\";\n\nconst initialState = {\n  subList: [],\n  total: 0,\n  filteredList: [],\n  isLoading: false,\n  errorMessage: \"\",\n  keyword: \"\",\n};\nconst getFilteredList = (subList, keyword) => {\n  return subList.filter(\n    (item) =>\n      item.ID.toString().indexOf(keyword) > -1 ||\n      item.Name.toLowerCase().indexOf(keyword) > -1 ||\n      item.Network.toLowerCase().indexOf(keyword) > -1 ||\n      item.Network.toLowerCase().indexOf(keyword) > -1 ||\n      item.Vlan.toString().indexOf(keyword) > -1\n    //   ||\n    //   item.OwnerInfo.name.toLowerCase().indexOf(keyword) > -1 ||\n    //   item.Netlink.Hyper.toString().indexOf(keyword) > -1 ||\n    //   item.Zones.map((val) => {\n    //     return val.Name.toLowerCase().indexOf(keyword) > -1;\n    //   })\n  );\n};\nexport default function SubReducer(state = initialState, action) {\n  switch (action.type) {\n    case SUB_LIST_IS_FETCHING:\n      return {\n        ...state,\n        isLoading: action.loading,\n      };\n    case SUB_LIST_FETCHED:\n      return {\n        ...state,\n        // isLoading: action.loading,\n        subList: action.subList,\n        filteredList: getFilteredList(action.subList, state.keyword),\n      };\n    case SUB_LIST_FILTER:\n      return {\n        ...state,\n        keyword: action.keyword,\n        filteredList: getFilteredList(state.subList, action.keyword),\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}