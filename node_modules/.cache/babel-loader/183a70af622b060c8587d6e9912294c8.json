{"ast":null,"code":"/*\n\nCopyright <holder> All Rights Reserved\n\nSPDX-License-Identifier: Apache-2.0\n\n*/\nimport { SECRULE_LIST_IS_FETCHING, SECRULE_LIST_FETCHED, SECRULE_LIST_FILTER } from \"../../constants/actionTypes\";\nconst initialState = {\n  secruleList: [],\n  total: 0,\n  filteredList: [],\n  isLoading: false,\n  errorMessage: \"\",\n  keyword: \"\"\n};\n\nconst getFilteredList = (secruleList, keyword) => {\n  return secruleList.filter(item => item.ID.toString().indexOf(keyword) > -1 || item.Protocol.toLowerCase().indexOf(keyword) > -1 || item.Direction.toLowerCase().indexOf(keyword) > -1 || item.RemoteIp.indexOf(keyword) > -1);\n};\n\nexport default function RegReducer(state = initialState, action) {\n  switch (action.type) {\n    case SECRULE_LIST_IS_FETCHING:\n      return { ...state,\n        isLoading: action.loading\n      };\n\n    case SECRULE_LIST_FETCHED:\n      return { ...state,\n        secruleList: action.secruleList,\n        filteredList: getFilteredList(action.secruleList, state.keyword)\n      };\n\n    case SECRULE_LIST_FILTER:\n      return { ...state,\n        keyword: action.keyword,\n        filteredList: getFilteredList(state.secruleList, action.keyword)\n      };\n\n    default:\n      return state;\n  }\n}\n_c = RegReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegReducer\");","map":{"version":3,"sources":["/Users/emily/cloudland/src/redux/reducers/SecruleReducer.jsx"],"names":["SECRULE_LIST_IS_FETCHING","SECRULE_LIST_FETCHED","SECRULE_LIST_FILTER","initialState","secruleList","total","filteredList","isLoading","errorMessage","keyword","getFilteredList","filter","item","ID","toString","indexOf","Protocol","toLowerCase","Direction","RemoteIp","RegReducer","state","action","type","loading"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACEA,wBADF,EAEEC,oBAFF,EAGEC,mBAHF,QAIO,6BAJP;AAMA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,EADM;AAEnBC,EAAAA,KAAK,EAAE,CAFY;AAGnBC,EAAAA,YAAY,EAAE,EAHK;AAInBC,EAAAA,SAAS,EAAE,KAJQ;AAKnBC,EAAAA,YAAY,EAAE,EALK;AAMnBC,EAAAA,OAAO,EAAE;AANU,CAArB;;AAQA,MAAMC,eAAe,GAAG,CAACN,WAAD,EAAcK,OAAd,KAA0B;AAChD,SAAOL,WAAW,CAACO,MAAZ,CACJC,IAAD,IACEA,IAAI,CAACC,EAAL,CAAQC,QAAR,GAAmBC,OAAnB,CAA2BN,OAA3B,IAAsC,CAAC,CAAvC,IACAG,IAAI,CAACI,QAAL,CAAcC,WAAd,GAA4BF,OAA5B,CAAoCN,OAApC,IAA+C,CAAC,CADhD,IAEAG,IAAI,CAACM,SAAL,CAAeD,WAAf,GAA6BF,OAA7B,CAAqCN,OAArC,IAAgD,CAAC,CAFjD,IAGAG,IAAI,CAACO,QAAL,CAAcJ,OAAd,CAAsBN,OAAtB,IAAiC,CAAC,CAL/B,CAAP;AAOD,CARD;;AASA,eAAe,SAASW,UAAT,CAAoBC,KAAK,GAAGlB,YAA5B,EAA0CmB,MAA1C,EAAkD;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKvB,wBAAL;AACE,aAAO,EACL,GAAGqB,KADE;AAELd,QAAAA,SAAS,EAAEe,MAAM,CAACE;AAFb,OAAP;;AAIF,SAAKvB,oBAAL;AACE,aAAO,EACL,GAAGoB,KADE;AAELjB,QAAAA,WAAW,EAAEkB,MAAM,CAAClB,WAFf;AAGLE,QAAAA,YAAY,EAAEI,eAAe,CAACY,MAAM,CAAClB,WAAR,EAAqBiB,KAAK,CAACZ,OAA3B;AAHxB,OAAP;;AAKF,SAAKP,mBAAL;AACE,aAAO,EACL,GAAGmB,KADE;AAELZ,QAAAA,OAAO,EAAEa,MAAM,CAACb,OAFX;AAGLH,QAAAA,YAAY,EAAEI,eAAe,CAACW,KAAK,CAACjB,WAAP,EAAoBkB,MAAM,CAACb,OAA3B;AAHxB,OAAP;;AAKF;AACE,aAAOY,KAAP;AAnBJ;AAqBD;KAtBuBD,U","sourcesContent":["/*\n\nCopyright <holder> All Rights Reserved\n\nSPDX-License-Identifier: Apache-2.0\n\n*/\nimport {\n  SECRULE_LIST_IS_FETCHING,\n  SECRULE_LIST_FETCHED,\n  SECRULE_LIST_FILTER,\n} from \"../../constants/actionTypes\";\n\nconst initialState = {\n  secruleList: [],\n  total: 0,\n  filteredList: [],\n  isLoading: false,\n  errorMessage: \"\",\n  keyword: \"\",\n};\nconst getFilteredList = (secruleList, keyword) => {\n  return secruleList.filter(\n    (item) =>\n      item.ID.toString().indexOf(keyword) > -1 ||\n      item.Protocol.toLowerCase().indexOf(keyword) > -1 ||\n      item.Direction.toLowerCase().indexOf(keyword) > -1 ||\n      item.RemoteIp.indexOf(keyword) > -1\n  );\n};\nexport default function RegReducer(state = initialState, action) {\n  switch (action.type) {\n    case SECRULE_LIST_IS_FETCHING:\n      return {\n        ...state,\n        isLoading: action.loading,\n      };\n    case SECRULE_LIST_FETCHED:\n      return {\n        ...state,\n        secruleList: action.secruleList,\n        filteredList: getFilteredList(action.secruleList, state.keyword),\n      };\n    case SECRULE_LIST_FILTER:\n      return {\n        ...state,\n        keyword: action.keyword,\n        filteredList: getFilteredList(state.secruleList, action.keyword),\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}