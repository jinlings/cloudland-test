{"ast":null,"code":"/*\n\nCopyright <holder> All Rights Reserved\n\nSPDX-License-Identifier: Apache-2.0\n\n*/\nimport { OCP_LIST_IS_FETCHING, OCP_LIST_FETCHED, OCP_LIST_FILTER } from \"../../constants/actionTypes\";\nconst initialState = {\n  ocpList: [],\n  total: 0,\n  filteredList: [],\n  isLoading: false,\n  errorMessage: \"\",\n  keyword: \"\"\n};\n\nconst getFilteredList = (ocpList, keyword) => {\n  console.log(\"getFilteredOcpList-ocpList:\", ocpList);\n  console.log(\"getFilteredOcpList-keyword:\", keyword);\n  return ocpList.filter(item => item.ID.toString().indexOf(keyword) > -1 || item.Label.toLowerCase().indexOf(keyword) > -1 || item.OcpVersion.toLowerCase().indexOf(keyword) > -1 || item.RegistryContent.toLowerCase().indexOf(keyword) > -1);\n};\n\nexport default function OcpReducer(state = initialState, action) {\n  console.log(\"initialState-state\", state);\n\n  switch (action.type) {\n    case OCP_LIST_IS_FETCHING:\n      return { ...state,\n        isLoading: action.loading\n      };\n\n    case OCP_LIST_FETCHED:\n      console.log(\"OCP_LIST_FETCHED\", action);\n      return { ...state,\n        // isLoading: action.loading,\n        regList: action.regList,\n        filteredList: getFilteredList(action.regList, state.keyword)\n      };\n\n    case OCP_LIST_FILTER:\n      console.log(\"OCP_LIST_FILTER-state\", state);\n      return { ...state,\n        keyword: action.keyword,\n        filteredList: getFilteredList(state.ocpList, action.keyword)\n      };\n\n    default:\n      return state;\n  }\n}\n_c = OcpReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"OcpReducer\");","map":{"version":3,"sources":["/Users/emily/cloudland/src/redux/reducers/OcpReducer.jsx"],"names":["OCP_LIST_IS_FETCHING","OCP_LIST_FETCHED","OCP_LIST_FILTER","initialState","ocpList","total","filteredList","isLoading","errorMessage","keyword","getFilteredList","console","log","filter","item","ID","toString","indexOf","Label","toLowerCase","OcpVersion","RegistryContent","OcpReducer","state","action","type","loading","regList"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,oBADJ,EAEIC,gBAFJ,EAGIC,eAHJ,QAIS,6BAJT;AAME,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,KAAK,EAAE,CAFY;AAGnBC,EAAAA,YAAY,EAAE,EAHK;AAInBC,EAAAA,SAAS,EAAE,KAJQ;AAKnBC,EAAAA,YAAY,EAAE,EALK;AAMnBC,EAAAA,OAAO,EAAE;AANU,CAArB;;AAQA,MAAMC,eAAe,GAAG,CAACN,OAAD,EAAUK,OAAV,KAAsB;AAC5CE,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CR,OAA3C;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CH,OAA3C;AACA,SAAOL,OAAO,CAACS,MAAR,CACJC,IAAD,IACEA,IAAI,CAACC,EAAL,CAAQC,QAAR,GAAmBC,OAAnB,CAA2BR,OAA3B,IAAsC,CAAC,CAAvC,IACAK,IAAI,CAACI,KAAL,CAAWC,WAAX,GAAyBF,OAAzB,CAAiCR,OAAjC,IAA4C,CAAC,CAD7C,IAEAK,IAAI,CAACM,UAAL,CAAgBD,WAAhB,GAA8BF,OAA9B,CAAsCR,OAAtC,IAAiD,CAAC,CAFlD,IAGAK,IAAI,CAACO,eAAL,CAAqBF,WAArB,GAAmCF,OAAnC,CAA2CR,OAA3C,IAAsD,CAAC,CALpD,CAAP;AAOD,CAVD;;AAWA,eAAe,SAASa,UAAT,CAAoBC,KAAK,GAAGpB,YAA5B,EAA0CqB,MAA1C,EAAkD;AAC/Db,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCW,KAAlC;;AACA,UAAQC,MAAM,CAACC,IAAf;AACE,SAAKzB,oBAAL;AACE,aAAO,EACL,GAAGuB,KADE;AAELhB,QAAAA,SAAS,EAAEiB,MAAM,CAACE;AAFb,OAAP;;AAIF,SAAKzB,gBAAL;AACEU,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCY,MAAhC;AACA,aAAO,EACL,GAAGD,KADE;AAEL;AACAI,QAAAA,OAAO,EAAEH,MAAM,CAACG,OAHX;AAILrB,QAAAA,YAAY,EAAEI,eAAe,CAACc,MAAM,CAACG,OAAR,EAAiBJ,KAAK,CAACd,OAAvB;AAJxB,OAAP;;AAMF,SAAKP,eAAL;AACES,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCW,KAArC;AACA,aAAO,EACL,GAAGA,KADE;AAELd,QAAAA,OAAO,EAAEe,MAAM,CAACf,OAFX;AAGLH,QAAAA,YAAY,EAAEI,eAAe,CAACa,KAAK,CAACnB,OAAP,EAAgBoB,MAAM,CAACf,OAAvB;AAHxB,OAAP;;AAKF;AACE,aAAOc,KAAP;AAtBJ;AAwBD;KA1BuBD,U","sourcesContent":["/*\n\nCopyright <holder> All Rights Reserved\n\nSPDX-License-Identifier: Apache-2.0\n\n*/\nimport {\n    OCP_LIST_IS_FETCHING,\n    OCP_LIST_FETCHED,\n    OCP_LIST_FILTER,\n  } from \"../../constants/actionTypes\";\n  \n  const initialState = {\n    ocpList: [],\n    total: 0,\n    filteredList: [],\n    isLoading: false,\n    errorMessage: \"\",\n    keyword: \"\",\n  };\n  const getFilteredList = (ocpList, keyword) => {\n    console.log(\"getFilteredOcpList-ocpList:\", ocpList);\n    console.log(\"getFilteredOcpList-keyword:\", keyword);\n    return ocpList.filter(\n      (item) =>\n        item.ID.toString().indexOf(keyword) > -1 ||\n        item.Label.toLowerCase().indexOf(keyword) > -1 ||\n        item.OcpVersion.toLowerCase().indexOf(keyword) > -1 ||\n        item.RegistryContent.toLowerCase().indexOf(keyword) > -1\n    );\n  };\n  export default function OcpReducer(state = initialState, action) {\n    console.log(\"initialState-state\", state);\n    switch (action.type) {\n      case OCP_LIST_IS_FETCHING:\n        return {\n          ...state,\n          isLoading: action.loading,\n        };\n      case OCP_LIST_FETCHED:\n        console.log(\"OCP_LIST_FETCHED\", action);\n        return {\n          ...state,\n          // isLoading: action.loading,\n          regList: action.regList,\n          filteredList: getFilteredList(action.regList, state.keyword),\n        };\n      case OCP_LIST_FILTER:\n        console.log(\"OCP_LIST_FILTER-state\", state);\n        return {\n          ...state,\n          keyword: action.keyword,\n          filteredList: getFilteredList(state.ocpList, action.keyword),\n        };\n      default:\n        return state;\n    }\n  }"]},"metadata":{},"sourceType":"module"}