{"ast":null,"code":"/*\n\nCopyright <holder> All Rights Reserved\n\nSPDX-License-Identifier: Apache-2.0\n\n*/\nimport { message } from \"antd\";\nimport axios from \"axios\";\nimport { getAll, getToken } from \"./auth\";\nconst instance = axios.create({\n  baseURL: \"https://cloudland.pic.cdl.ibm.com\",\n  timeout: 5000,\n  headers: {\n    \"Content-Type\": \"application/json;charset=UTF-8\",\n    \"Allow-Control-Allow-Origin\": \"*\"\n  }\n}); //全局请求拦截，发送请求之前执行\n\ninstance.interceptors.request.use(config => {\n  console.log(\"getToken():\", getToken());\n  console.log(\"getAll():\", getAll());\n\n  if (getToken()) {\n    config.headers.common[\"X-Auth-Token\"] = getToken();\n  } else {\n    delete config.headers.common[\"x-auth-token\"]; // router.push({\n    //   name: \"login\",\n    // });\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n}); //请求返回之后执行\n\ninstance.interceptors.response.use(response => {\n  console.log(\"axios-response\", response);\n  return response.data;\n}, error => {\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        console.log(\"Need Login\");\n        window.location = \"/login\";\n        break;\n\n      default:\n        message.error(error.response.data.ErrorMsg, 5);\n        break;\n    }\n  }\n\n  console.log(\"axios-error\", error.response);\n  return Promise.reject(error); // console.log(\"axios-error\", error.response);\n  // return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"sources":["/Users/emily/cloudland/src/utils/request.jsx"],"names":["message","axios","getAll","getToken","instance","create","baseURL","timeout","headers","interceptors","request","use","config","console","log","common","error","Promise","reject","response","data","status","window","location","ErrorMsg"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,MAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AAEA,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAE,mCADmB;AAE5BC,EAAAA,OAAO,EAAE,IAFmB;AAG5BC,EAAAA,OAAO,EAAE;AACP,oBAAgB,gCADT;AAEP,kCAA8B;AAFvB;AAHmB,CAAb,CAAjB,C,CAQA;;AACAJ,QAAQ,CAACK,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACGC,MAAD,IAAY;AACVC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BX,QAAQ,EAAnC;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBZ,MAAM,EAA/B;;AACA,MAAIC,QAAQ,EAAZ,EAAgB;AACdS,IAAAA,MAAM,CAACJ,OAAP,CAAeO,MAAf,CAAsB,cAAtB,IAAwCZ,QAAQ,EAAhD;AACD,GAFD,MAEO;AACL,WAAOS,MAAM,CAACJ,OAAP,CAAeO,MAAf,CAAsB,cAAtB,CAAP,CADK,CAEL;AACA;AACA;AACD;;AAED,SAAOH,MAAP;AACD,CAdH,EAeGI,KAAD,IAAW;AACT,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAjBH,E,CAmBA;;AACAZ,QAAQ,CAACK,YAAT,CAAsBU,QAAtB,CAA+BR,GAA/B,CACGQ,QAAD,IAAc;AACZN,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BK,QAA9B;AACA,SAAOA,QAAQ,CAACC,IAAhB;AACD,CAJH,EAKGJ,KAAD,IAAW;AACT,MAAIA,KAAK,CAACG,QAAV,EAAoB;AAClB,YAAQH,KAAK,CAACG,QAAN,CAAeE,MAAvB;AACE,WAAK,GAAL;AACER,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAQ,QAAAA,MAAM,CAACC,QAAP,GAAkB,QAAlB;AACA;;AACF;AACEvB,QAAAA,OAAO,CAACgB,KAAR,CAAcA,KAAK,CAACG,QAAN,CAAeC,IAAf,CAAoBI,QAAlC,EAA4C,CAA5C;AACA;AAPJ;AASD;;AACDX,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BE,KAAK,CAACG,QAAjC;AACA,SAAOF,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP,CAbS,CAcT;AACA;AACD,CArBH;AAuBA,eAAeZ,QAAf","sourcesContent":["/*\n\nCopyright <holder> All Rights Reserved\n\nSPDX-License-Identifier: Apache-2.0\n\n*/\nimport { message } from \"antd\";\nimport axios from \"axios\";\nimport { getAll, getToken } from \"./auth\";\n\nconst instance = axios.create({\n  baseURL: \"https://cloudland.pic.cdl.ibm.com\",\n  timeout: 5000,\n  headers: {\n    \"Content-Type\": \"application/json;charset=UTF-8\",\n    \"Allow-Control-Allow-Origin\": \"*\",\n  },\n});\n//全局请求拦截，发送请求之前执行\ninstance.interceptors.request.use(\n  (config) => {\n    console.log(\"getToken():\", getToken());\n    console.log(\"getAll():\", getAll());\n    if (getToken()) {\n      config.headers.common[\"X-Auth-Token\"] = getToken();\n    } else {\n      delete config.headers.common[\"x-auth-token\"];\n      // router.push({\n      //   name: \"login\",\n      // });\n    }\n\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n//请求返回之后执行\ninstance.interceptors.response.use(\n  (response) => {\n    console.log(\"axios-response\", response);\n    return response.data;\n  },\n  (error) => {\n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          console.log(\"Need Login\");\n          window.location = \"/login\";\n          break;\n        default:\n          message.error(error.response.data.ErrorMsg, 5);\n          break;\n      }\n    }\n    console.log(\"axios-error\", error.response);\n    return Promise.reject(error);\n    // console.log(\"axios-error\", error.response);\n    // return Promise.reject(error);\n  }\n);\nexport default instance;\n"]},"metadata":{},"sourceType":"module"}