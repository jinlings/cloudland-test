{"ast":null,"code":"var _jsxFileName = \"/Users/emily/cloudland/src/pages/gateways/ModifyGateways.jsx\";\nimport React, { Component } from \"react\";\nimport { Form, Card, Button, Select, Input, message } from \"antd\";\nimport { subnetsListApi } from \"../../service/subnets\";\nimport { createGWApi, editGWInfor, getGWInforById } from \"../../service/gateways\";\nimport { hypersListApi } from \"../../service/hypers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst layoutButton = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst layoutForm = {\n  labelCol: {\n    span: 6\n  },\n  wrapperCol: {\n    span: 10\n  }\n};\n\nclass ModifyGateways extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = event => {\n      console.log(\"handleSubmit:\", event);\n      event.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        console.log(\"handleSubmit-values\", values);\n\n        if (!err) {\n          console.log(\"handleSubmit-value-editGWInfor:\", values);\n          console.log(\"提交\");\n\n          if (this.props.match.params.id) {\n            console.log(\"gw-edit\", this.props.match.params.id, values);\n            values.subnets = values.subnets.map(String);\n            editGWInfor(this.props.match.params.id, values).then(res => {\n              console.log(\"gw-editGWInfor:\", res);\n              this.props.history.push(\"/gateways\");\n            });\n          } else {\n            values.zone = parseInt(values.zone);\n            values.public = values.public === undefined ? this.state.public : values.public;\n            values.private = values.private === undefined ? this.state.private : values.private;\n            values.subnets = values.subnets === undefined ? this.state.subnetsValue : values.subnets.map(String);\n            console.log(\"submit-value\", values);\n            createGWApi(values).then(res => {\n              console.log(\"handleSubmit-res-createGWApi:\", res);\n              this.props.history.push(\"/gateways\"); // Utils.loadData(this.state.current, this.state.pageSize)\n            }).catch(err => {\n              console.log(\"handleSubmit-error:\", err);\n              message.error(err.response.data.ErrorMsg);\n            });\n          }\n        } else {\n          message.error(\" input wrong information\");\n        }\n      });\n    };\n\n    this.listGateways = () => {\n      this.props.history.push(\"/gateways\");\n    };\n\n    this.state = {\n      subnets: [],\n      name: \"\",\n      public: \"\",\n      private: \"\",\n      subnetsValue: [],\n      isShowEdit: false,\n      currentData: []\n    };\n\n    if (props.match.params.id) {\n      getGWInforById(props.match.params.id).then(res => {\n        console.log(\"getGWInforById:\", res);\n        this.setState({\n          currentData: res,\n          isShowEdit: true\n        });\n        console.log(\"getGWInforById-state:\", this.state.currentData);\n      });\n    }\n  }\n\n  componentWillMount() {\n    const _this = this;\n\n    subnetsListApi().then(res => {\n      console.log(\"componentDidMount-orgsListApi:\", res);\n\n      _this.setState({\n        subnets: res.subnets,\n        isLoaded: true\n      });\n    }).catch(error => {\n      _this.setState({\n        isLoaded: false,\n        error: error\n      });\n    });\n    hypersListApi().then(res => {\n      _this.setState({\n        hypers: res.hypers,\n        isLoaded: true\n      });\n\n      this.state.hypers.forEach(val => {\n        let zoneList = {\n          Name: val.Zone.Name,\n          ID: val.Zone.ID\n        };\n        this.state.zones.push(zoneList);\n      });\n      this.filterZones();\n    }).catch(error => {\n      _this.setState({\n        isLoaded: false,\n        error: error\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      title: this.state.isShowEdit ? \"Edit Gateway\" : \"Create New Gateway \",\n      extra: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        size: \"small\",\n        onClick: this.listGateways,\n        children: \"Return\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        layout: \"horizontal\",\n        wrapperCol: { ...layoutForm.wrapperCol\n        },\n        onSubmit: e => this.handleSubmit(e),\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Name\",\n          name: \"name\",\n          labelCol: { ...layoutForm.labelCol\n          },\n          children: this.props.form.getFieldDecorator(\"name\", {\n            rules: [{\n              required: true\n            }],\n            initialValue: this.state.currentData.Name\n          })( /*#__PURE__*/_jsxDEV(Input // ref={(c) => {\n          //   this.hostname = c;\n          // }}\n          // disabled={this.state.isShowEdit}\n          // onChange={(e) => this.setState({ hostname: e.target.value })}\n          , {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Zone\",\n          name: \"zone\",\n          labelCol: { ...layoutForm.labelCol\n          },\n          hidden: this.state.isShowEdit,\n          children: this.props.form.getFieldDecorator(\"zone\", {\n            rules: [{\n              required: !this.state.isShowEdit\n            }]\n          })( /*#__PURE__*/_jsxDEV(Select, {\n            children: /*#__PURE__*/_jsxDEV(Select.Option, {\n              value: \"1543\",\n              children: \"zone0\"\n            }, \"zone\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Created At\",\n          name: \"createdAt\",\n          labelCol: { ...layoutForm.labelCol\n          },\n          hidden: !this.state.isShowEdit,\n          children: this.props.form.getFieldDecorator(\"createdAt\", {\n            rules: [],\n            initialValue: this.state.currentData.CreatedAt\n          })( /*#__PURE__*/_jsxDEV(Input, {\n            disabled: this.state.isShowEdit,\n            name: \"createdAt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 16\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Updated At\",\n          name: \"updatedAt\",\n          labelCol: { ...layoutForm.labelCol\n          },\n          hidden: !this.state.isShowEdit,\n          children: this.props.form.getFieldDecorator(\"updatedAt\", {\n            rules: [],\n            initialValue: this.state.currentData.UpdatedAt\n          })( /*#__PURE__*/_jsxDEV(Input, {\n            disabled: this.state.isShowEdit,\n            name: \"updatedAt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 16\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Public Gateways\",\n          name: \"public\",\n          labelCol: { ...layoutForm.labelCol\n          },\n          hidden: this.state.isShowEdit,\n          children: this.props.form.getFieldDecorator(\"public\", {\n            rules: []\n          })( /*#__PURE__*/_jsxDEV(Select, {\n            children: this.state.subnets.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(Select.Option, {\n                value: item.Name,\n                children: [item.Name, \" - \", item.Network]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Private Gateway\",\n          name: \"private\",\n          labelCol: { ...layoutForm.labelCol\n          },\n          hidden: this.state.isShowEdit,\n          children: this.props.form.getFieldDecorator(\"private\", {\n            rules: []\n          })( /*#__PURE__*/_jsxDEV(Select, {\n            children: this.state.subnets.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(Select.Option, {\n                value: item.Name,\n                children: [item.Name, \" - \", item.Network]\n              }, item.ID, true, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Subnets\",\n          name: \"subnets\",\n          labelCol: { ...layoutForm.labelCol\n          },\n          children: this.props.form.getFieldDecorator(\"subnets\", {\n            rules: [],\n            initialValue: this.state.subnets.length === 0 ? this.state.subnets.map(item => {\n              return item.Name - item.Network;\n            }) : []\n          })( /*#__PURE__*/_jsxDEV(Select, {\n            mode: \"multiple\",\n            style: {\n              width: \"100%\"\n            },\n            placeholder: \"Please select\",\n            onChange: this.handleSubChange,\n            children: this.state.subnets.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(Select.Option, {\n                value: item.ID,\n                children: [item.Name, \" - \", item.Network]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          wrapperCol: { ...layoutButton.wrapperCol,\n            offset: 8\n          },\n          labelCol: {\n            span: 6\n          },\n          children: this.state.isShowEdit ? /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            children: \"Update Gateway\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            children: \"Create Gateway\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Form.create({\n  name: \"modifygateways\"\n})(ModifyGateways);","map":{"version":3,"sources":["/Users/emily/cloudland/src/pages/gateways/ModifyGateways.jsx"],"names":["React","Component","Form","Card","Button","Select","Input","message","subnetsListApi","createGWApi","editGWInfor","getGWInforById","hypersListApi","layoutButton","labelCol","span","wrapperCol","layoutForm","ModifyGateways","constructor","props","handleSubmit","event","console","log","preventDefault","form","validateFieldsAndScroll","err","values","match","params","id","subnets","map","String","then","res","history","push","zone","parseInt","public","undefined","state","private","subnetsValue","catch","error","response","data","ErrorMsg","listGateways","name","isShowEdit","currentData","setState","componentWillMount","_this","isLoaded","hypers","forEach","val","zoneList","Name","Zone","ID","zones","filterZones","render","e","getFieldDecorator","rules","required","initialValue","CreatedAt","UpdatedAt","item","index","Network","length","width","handleSubChange","offset","create"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Card, Button, Select, Input, message } from \"antd\";\nimport { subnetsListApi } from \"../../service/subnets\";\nimport {\n  createGWApi,\n  editGWInfor,\n  getGWInforById,\n} from \"../../service/gateways\";\nimport { hypersListApi } from \"../../service/hypers\";\nconst layoutButton = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst layoutForm = {\n  labelCol: { span: 6 },\n  wrapperCol: { span: 10 },\n};\nclass ModifyGateways extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subnets: [],\n      name: \"\",\n      public: \"\",\n      private: \"\",\n      subnetsValue: [],\n      isShowEdit: false,\n      currentData: [],\n    };\n    if (props.match.params.id) {\n      getGWInforById(props.match.params.id).then((res) => {\n        console.log(\"getGWInforById:\", res);\n        this.setState({\n          currentData: res,\n          isShowEdit: true,\n        });\n        console.log(\"getGWInforById-state:\", this.state.currentData);\n      });\n    }\n  }\n\n  componentWillMount() {\n    const _this = this;\n\n    subnetsListApi()\n      .then((res) => {\n        console.log(\"componentDidMount-orgsListApi:\", res);\n        _this.setState({\n          subnets: res.subnets,\n          isLoaded: true,\n        });\n      })\n      .catch((error) => {\n        _this.setState({\n          isLoaded: false,\n          error: error,\n        });\n      });\n    hypersListApi()\n      .then((res) => {\n        _this.setState({\n          hypers: res.hypers,\n          isLoaded: true,\n        });\n        this.state.hypers.forEach((val) => {\n          let zoneList = {\n            Name: val.Zone.Name,\n            ID: val.Zone.ID,\n          };\n          this.state.zones.push(zoneList);\n        });\n        this.filterZones();\n      })\n      .catch((error) => {\n        _this.setState({\n          isLoaded: false,\n          error: error,\n        });\n      });\n  }\n\n  handleSubmit = (event) => {\n    console.log(\"handleSubmit:\", event);\n    event.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      console.log(\"handleSubmit-values\", values);\n      if (!err) {\n        console.log(\"handleSubmit-value-editGWInfor:\", values);\n        console.log(\"提交\");\n        if (this.props.match.params.id) {\n          console.log(\"gw-edit\", this.props.match.params.id, values);\n          values.subnets = values.subnets.map(String);\n          editGWInfor(this.props.match.params.id, values).then((res) => {\n            console.log(\"gw-editGWInfor:\", res);\n\n            this.props.history.push(\"/gateways\");\n          });\n        } else {\n          values.zone = parseInt(values.zone);\n          values.public =\n            values.public === undefined ? this.state.public : values.public;\n\n          values.private =\n            values.private === undefined ? this.state.private : values.private;\n\n          values.subnets =\n            values.subnets === undefined\n              ? this.state.subnetsValue\n              : values.subnets.map(String);\n          console.log(\"submit-value\", values);\n          createGWApi(values)\n            .then((res) => {\n              console.log(\"handleSubmit-res-createGWApi:\", res);\n              this.props.history.push(\"/gateways\");\n\n              // Utils.loadData(this.state.current, this.state.pageSize)\n            })\n            .catch((err) => {\n              console.log(\"handleSubmit-error:\", err);\n              message.error(err.response.data.ErrorMsg);\n            });\n        }\n      } else {\n        message.error(\" input wrong information\");\n      }\n    });\n  };\n  listGateways = () => {\n    this.props.history.push(\"/gateways\");\n  };\n  render() {\n    return (\n      <Card\n        title={this.state.isShowEdit ? \"Edit Gateway\" : \"Create New Gateway \"}\n        extra={\n          <Button type=\"primary\" size=\"small\" onClick={this.listGateways}>\n            Return\n          </Button>\n        }\n      >\n        <Form\n          layout=\"horizontal\"\n          wrapperCol={{ ...layoutForm.wrapperCol }}\n          onSubmit={(e) => this.handleSubmit(e)}\n        >\n          <Form.Item\n            label=\"Name\"\n            name=\"name\"\n            labelCol={{ ...layoutForm.labelCol }}\n          >\n            {this.props.form.getFieldDecorator(\"name\", {\n              rules: [\n                {\n                  required: true,\n                },\n              ],\n              initialValue: this.state.currentData.Name,\n            })(\n              <Input\n              // ref={(c) => {\n              //   this.hostname = c;\n              // }}\n              // disabled={this.state.isShowEdit}\n              // onChange={(e) => this.setState({ hostname: e.target.value })}\n              />\n            )}\n          </Form.Item>\n          <Form.Item\n            label=\"Zone\"\n            name=\"zone\"\n            labelCol={{ ...layoutForm.labelCol }}\n            hidden={this.state.isShowEdit}\n          >\n            {this.props.form.getFieldDecorator(\"zone\", {\n              rules: [\n                {\n                  required: !this.state.isShowEdit,\n                },\n              ],\n            })(\n              <Select>\n                <Select.Option key=\"zone\" value=\"1543\">\n                  zone0\n                </Select.Option>\n              </Select>\n            )}\n          </Form.Item>\n          <Form.Item\n            label=\"Created At\"\n            name=\"createdAt\"\n            labelCol={{ ...layoutForm.labelCol }}\n            hidden={!this.state.isShowEdit}\n          >\n            {this.props.form.getFieldDecorator(\"createdAt\", {\n              rules: [],\n              initialValue: this.state.currentData.CreatedAt,\n            })(<Input disabled={this.state.isShowEdit} name=\"createdAt\" />)}\n          </Form.Item>\n          <Form.Item\n            label=\"Updated At\"\n            name=\"updatedAt\"\n            labelCol={{ ...layoutForm.labelCol }}\n            hidden={!this.state.isShowEdit}\n          >\n            {this.props.form.getFieldDecorator(\"updatedAt\", {\n              rules: [],\n              initialValue: this.state.currentData.UpdatedAt,\n            })(<Input disabled={this.state.isShowEdit} name=\"updatedAt\" />)}\n          </Form.Item>\n          <Form.Item\n            label=\"Public Gateways\"\n            name=\"public\"\n            labelCol={{ ...layoutForm.labelCol }}\n            hidden={this.state.isShowEdit}\n          >\n            {this.props.form.getFieldDecorator(\"public\", {\n              rules: [],\n            })(\n              <Select>\n                {this.state.subnets.map((item, index) => {\n                  return (\n                    <Select.Option key={index} value={item.Name}>\n                      {item.Name} - {item.Network}\n                    </Select.Option>\n                  );\n                })}\n              </Select>\n            )}\n          </Form.Item>\n\n          <Form.Item\n            label=\"Private Gateway\"\n            name=\"private\"\n            labelCol={{ ...layoutForm.labelCol }}\n            hidden={this.state.isShowEdit}\n          >\n            {this.props.form.getFieldDecorator(\"private\", {\n              rules: [],\n            })(\n              <Select>\n                {this.state.subnets.map((item, index) => {\n                  return (\n                    <Select.Option key={item.ID} value={item.Name}>\n                      {item.Name} - {item.Network}\n                    </Select.Option>\n                  );\n                })}\n              </Select>\n            )}\n          </Form.Item>\n          <Form.Item\n            label=\"Subnets\"\n            name=\"subnets\"\n            labelCol={{ ...layoutForm.labelCol }}\n          >\n            {this.props.form.getFieldDecorator(\"subnets\", {\n              rules: [],\n              initialValue:\n                this.state.subnets.length === 0\n                  ? this.state.subnets.map((item) => {\n                      return item.Name - item.Network;\n                    })\n                  : [],\n            })(\n              <Select\n                mode=\"multiple\"\n                style={{ width: \"100%\" }}\n                placeholder=\"Please select\"\n                onChange={this.handleSubChange}\n              >\n                {this.state.subnets.map((item, index) => {\n                  return (\n                    <Select.Option value={item.ID} key={index}>\n                      {item.Name} - {item.Network}\n                    </Select.Option>\n                  );\n                })}\n              </Select>\n            )}\n          </Form.Item>\n\n          <Form.Item\n            wrapperCol={{ ...layoutButton.wrapperCol, offset: 8 }}\n            labelCol={{ span: 6 }}\n          >\n            {this.state.isShowEdit ? (\n              <Button type=\"primary\" htmlType=\"submit\">\n                Update Gateway\n              </Button>\n            ) : (\n              <Button type=\"primary\" htmlType=\"submit\">\n                Create Gateway\n              </Button>\n            )}\n          </Form.Item>\n        </Form>\n      </Card>\n    );\n  }\n}\nexport default Form.create({ name: \"modifygateways\" })(ModifyGateways);\n"]},"metadata":{},"sourceType":"module"}