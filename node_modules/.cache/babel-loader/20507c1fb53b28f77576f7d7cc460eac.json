{"ast":null,"code":"/*\n\nCopyright <holder> All Rights Reserved\n\nSPDX-License-Identifier: Apache-2.0\n\n*/\nimport { FLOATINGIP_LIST_IS_FETCHING, FLOATINGIP_LIST_FETCHED, FLOATINGIP_LIST_FILTER } from \"../../constants/actionTypes\";\nconst initialState = {\n  floatList: [],\n  total: 0,\n  filteredList: [],\n  isLoading: false,\n  errorMessage: \"\",\n  keyword: \"\"\n};\n\nconst getFilteredList = (floatList, keyword) => {\n  return floatList.filter(item => item.ID.toString().indexOf(keyword) > -1 || item.FipAddress.indexOf(keyword) > -1 || item.IntAddress.indexOf(keyword) > -1 || item.Instance.Hostname.toLowerCase().indexOf(keyword) > -1);\n};\n\nexport default function FloatingIPReducer(state = initialState, action) {\n  switch (action.type) {\n    case FLOATINGIP_LIST_IS_FETCHING:\n      return { ...state,\n        isLoading: action.loading\n      };\n\n    case FLOATINGIP_LIST_FETCHED:\n      return { ...state,\n        // isLoading: action.loading,\n        floatList: action.floatList,\n        filteredList: getFilteredList(action.floatList, state.keyword)\n      };\n\n    case FLOATINGIP_LIST_FILTER:\n      return { ...state,\n        keyword: action.keyword,\n        filteredList: getFilteredList(state.floatList, action.keyword)\n      };\n\n    default:\n      return state;\n  }\n}\n_c = FloatingIPReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"FloatingIPReducer\");","map":{"version":3,"sources":["/Users/emily/cloudland/src/redux/reducers/FloatingIpReducer.jsx"],"names":["FLOATINGIP_LIST_IS_FETCHING","FLOATINGIP_LIST_FETCHED","FLOATINGIP_LIST_FILTER","initialState","floatList","total","filteredList","isLoading","errorMessage","keyword","getFilteredList","filter","item","ID","toString","indexOf","FipAddress","IntAddress","Instance","Hostname","toLowerCase","FloatingIPReducer","state","action","type","loading"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACEA,2BADF,EAEEC,uBAFF,EAGEC,sBAHF,QAIO,6BAJP;AAMA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,EADQ;AAEnBC,EAAAA,KAAK,EAAE,CAFY;AAGnBC,EAAAA,YAAY,EAAE,EAHK;AAInBC,EAAAA,SAAS,EAAE,KAJQ;AAKnBC,EAAAA,YAAY,EAAE,EALK;AAMnBC,EAAAA,OAAO,EAAE;AANU,CAArB;;AAQA,MAAMC,eAAe,GAAG,CAACN,SAAD,EAAYK,OAAZ,KAAwB;AAC9C,SAAOL,SAAS,CAACO,MAAV,CACJC,IAAD,IACEA,IAAI,CAACC,EAAL,CAAQC,QAAR,GAAmBC,OAAnB,CAA2BN,OAA3B,IAAsC,CAAC,CAAvC,IACAG,IAAI,CAACI,UAAL,CAAgBD,OAAhB,CAAwBN,OAAxB,IAAmC,CAAC,CADpC,IAEAG,IAAI,CAACK,UAAL,CAAgBF,OAAhB,CAAwBN,OAAxB,IAAmC,CAAC,CAFpC,IAGAG,IAAI,CAACM,QAAL,CAAcC,QAAd,CAAuBC,WAAvB,GAAqCL,OAArC,CAA6CN,OAA7C,IAAwD,CAAC,CALtD,CAAP;AAOD,CARD;;AASA,eAAe,SAASY,iBAAT,CAA2BC,KAAK,GAAGnB,YAAnC,EAAiDoB,MAAjD,EAAyD;AACtE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKxB,2BAAL;AACE,aAAO,EACL,GAAGsB,KADE;AAELf,QAAAA,SAAS,EAAEgB,MAAM,CAACE;AAFb,OAAP;;AAIF,SAAKxB,uBAAL;AACE,aAAO,EACL,GAAGqB,KADE;AAEL;AACAlB,QAAAA,SAAS,EAAEmB,MAAM,CAACnB,SAHb;AAILE,QAAAA,YAAY,EAAEI,eAAe,CAACa,MAAM,CAACnB,SAAR,EAAmBkB,KAAK,CAACb,OAAzB;AAJxB,OAAP;;AAMF,SAAKP,sBAAL;AACE,aAAO,EACL,GAAGoB,KADE;AAELb,QAAAA,OAAO,EAAEc,MAAM,CAACd,OAFX;AAGLH,QAAAA,YAAY,EAAEI,eAAe,CAACY,KAAK,CAAClB,SAAP,EAAkBmB,MAAM,CAACd,OAAzB;AAHxB,OAAP;;AAKF;AACE,aAAOa,KAAP;AApBJ;AAsBD;KAvBuBD,iB","sourcesContent":["/*\n\nCopyright <holder> All Rights Reserved\n\nSPDX-License-Identifier: Apache-2.0\n\n*/\nimport {\n  FLOATINGIP_LIST_IS_FETCHING,\n  FLOATINGIP_LIST_FETCHED,\n  FLOATINGIP_LIST_FILTER,\n} from \"../../constants/actionTypes\";\n\nconst initialState = {\n  floatList: [],\n  total: 0,\n  filteredList: [],\n  isLoading: false,\n  errorMessage: \"\",\n  keyword: \"\",\n};\nconst getFilteredList = (floatList, keyword) => {\n  return floatList.filter(\n    (item) =>\n      item.ID.toString().indexOf(keyword) > -1 ||\n      item.FipAddress.indexOf(keyword) > -1 ||\n      item.IntAddress.indexOf(keyword) > -1 ||\n      item.Instance.Hostname.toLowerCase().indexOf(keyword) > -1\n  );\n};\nexport default function FloatingIPReducer(state = initialState, action) {\n  switch (action.type) {\n    case FLOATINGIP_LIST_IS_FETCHING:\n      return {\n        ...state,\n        isLoading: action.loading,\n      };\n    case FLOATINGIP_LIST_FETCHED:\n      return {\n        ...state,\n        // isLoading: action.loading,\n        floatList: action.floatList,\n        filteredList: getFilteredList(action.floatList, state.keyword),\n      };\n    case FLOATINGIP_LIST_FILTER:\n      return {\n        ...state,\n        keyword: action.keyword,\n        filteredList: getFilteredList(state.floatList, action.keyword),\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}