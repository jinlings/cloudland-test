{"ast":null,"code":"import { FLOATINGIP_LIST_FETCHED, FLOATINGIP_LIST_FILTER, FLOATINGIP_LIST_IS_FETCHING } from \"../../constants/actionTypes\";\nimport { floatingipsListApi } from \"../../service/floatingips\";\nexport const filterFloatingIpList = keyword => ({\n  type: FLOATINGIP_LIST_FILTER,\n  keyword\n});\nexport const fetchFloatingIpList = () => {\n  return dispatch => {\n    dispatch(fetchingFloatingIpList(true));\n    floatingipsListApi().then(res => {\n      console.log(\"floatingipAction-res\", res); // let resData = res.data;\n\n      if (res) {\n        dispatch(fetchingFloatingIpList(false));\n        dispatch(fetchFloatingIpListSuccess(res.floatingips, false)); //   } else {\n        //     //   dispatch(fetchingUserList(false));\n        //     //   dispatch(fetchUserListFailed(\"\b获取用户列表失败\"));\n      }\n    }); //   .catch((e) => dispatch(fetchUserListFailed(e.message)));\n  };\n};\nexport const fetchFloatingIpListSuccess = (floatList, loading) => ({\n  type: FLOATINGIP_LIST_FETCHED,\n  floatList,\n  loading\n});\nexport const fetchingFloatingIpList = loading => ({\n  type: FLOATINGIP_LIST_IS_FETCHING,\n  loading\n});","map":{"version":3,"sources":["/Users/emily/cloudland/src/redux/actions/FloatingIpAction.jsx"],"names":["FLOATINGIP_LIST_FETCHED","FLOATINGIP_LIST_FILTER","FLOATINGIP_LIST_IS_FETCHING","floatingipsListApi","filterFloatingIpList","keyword","type","fetchFloatingIpList","dispatch","fetchingFloatingIpList","then","res","console","log","fetchFloatingIpListSuccess","floatingips","floatList","loading"],"mappings":"AAAA,SACEA,uBADF,EAEEC,sBAFF,EAGEC,2BAHF,QAIO,6BAJP;AAKA,SAASC,kBAAT,QAAmC,2BAAnC;AACA,OAAO,MAAMC,oBAAoB,GAAIC,OAAD,KAAc;AAChDC,EAAAA,IAAI,EAAEL,sBAD0C;AAEhDI,EAAAA;AAFgD,CAAd,CAA7B;AAIP,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACvC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACC,sBAAsB,CAAC,IAAD,CAAvB,CAAR;AACAN,IAAAA,kBAAkB,GAAGO,IAArB,CAA2BC,GAAD,IAAS;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,GAApC,EADiC,CAEjC;;AACA,UAAIA,GAAJ,EAAS;AACPH,QAAAA,QAAQ,CAACC,sBAAsB,CAAC,KAAD,CAAvB,CAAR;AACAD,QAAAA,QAAQ,CAACM,0BAA0B,CAACH,GAAG,CAACI,WAAL,EAAkB,KAAlB,CAA3B,CAAR,CAFO,CAGP;AACA;AACA;AACD;AACF,KAVD,EAFmB,CAanB;AACD,GAdD;AAeD,CAhBM;AAiBP,OAAO,MAAMD,0BAA0B,GAAG,CAACE,SAAD,EAAYC,OAAZ,MAAyB;AACjEX,EAAAA,IAAI,EAAEN,uBAD2D;AAEjEgB,EAAAA,SAFiE;AAGjEC,EAAAA;AAHiE,CAAzB,CAAnC;AAKP,OAAO,MAAMR,sBAAsB,GAAIQ,OAAD,KAAc;AAClDX,EAAAA,IAAI,EAAEJ,2BAD4C;AAElDe,EAAAA;AAFkD,CAAd,CAA/B","sourcesContent":["import {\n  FLOATINGIP_LIST_FETCHED,\n  FLOATINGIP_LIST_FILTER,\n  FLOATINGIP_LIST_IS_FETCHING,\n} from \"../../constants/actionTypes\";\nimport { floatingipsListApi } from \"../../service/floatingips\";\nexport const filterFloatingIpList = (keyword) => ({\n  type: FLOATINGIP_LIST_FILTER,\n  keyword,\n});\nexport const fetchFloatingIpList = () => {\n  return (dispatch) => {\n    dispatch(fetchingFloatingIpList(true));\n    floatingipsListApi().then((res) => {\n      console.log(\"floatingipAction-res\", res);\n      // let resData = res.data;\n      if (res) {\n        dispatch(fetchingFloatingIpList(false));\n        dispatch(fetchFloatingIpListSuccess(res.floatingips, false));\n        //   } else {\n        //     //   dispatch(fetchingUserList(false));\n        //     //   dispatch(fetchUserListFailed(\"\b获取用户列表失败\"));\n      }\n    });\n    //   .catch((e) => dispatch(fetchUserListFailed(e.message)));\n  };\n};\nexport const fetchFloatingIpListSuccess = (floatList, loading) => ({\n  type: FLOATINGIP_LIST_FETCHED,\n  floatList,\n  loading,\n});\nexport const fetchingFloatingIpList = (loading) => ({\n  type: FLOATINGIP_LIST_IS_FETCHING,\n  loading,\n});\n"]},"metadata":{},"sourceType":"module"}