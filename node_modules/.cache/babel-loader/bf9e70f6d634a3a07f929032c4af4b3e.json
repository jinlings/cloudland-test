{"ast":null,"code":"import { REG_LIST_FETCHED, REG_LIST_FILTER, REG_LIST_IS_FETCHING, REG_LIST_DELETE_FAILED, REG_LIST_DELETING, REG_LIST_DELETE_SUCCESS } from \"../../constants/actionTypes\";\nimport { regListApi, delRegInfor } from \"../../service/registrys\";\nexport const filterRegList = keyword => ({\n  type: REG_LIST_FILTER,\n  keyword\n});\nexport const fetchRegList = () => {\n  return dispatch => {\n    dispatch(fetchingRegList(true));\n    regListApi().then(res => {\n      console.log(\"regAction-res\", res); // let resData = res.data;\n\n      if (res) {\n        dispatch(fetchingRegList(false));\n        dispatch(fetchRegListSuccess(res.registrys, false)); //   } else {\n        //     //   dispatch(fetchingUserList(false));\n        //     //   dispatch(fetchUserListFailed(\"\b获取用户列表失败\"));\n      }\n    }); //   .catch((e) => dispatch(fetchUserListFailed(e.message)));\n  };\n};\nexport const fetchRegListSuccess = (regList, loading) => ({\n  type: REG_LIST_FETCHED,\n  regList,\n  loading\n});\nexport const fetchingRegList = loading => ({\n  type: REG_LIST_IS_FETCHING,\n  loading\n});\nexport const deleteReg = id => {\n  return dispatch => {\n    dispatch(deletingReg(true));\n    delRegInfor(id).then(res => {\n      if (res) {\n        dispatch(deletingReg(false));\n        dispatch(deleteRegSuccess(res.registrys, res.Msg));\n      } else {\n        dispatch(deletingReg(false));\n        dispatch(deleteRegFailed(`\bFailed to delete ${id}`));\n      } // this.loadData(this.state.current, this.state.pageSize);\n\n    }).catch(e => dispatch(deleteRegFailed(e.message)));\n  };\n};\nexport const deleteRegFailed = message => ({\n  type: REG_LIST_DELETE_FAILED,\n  message\n});\nexport const deletingReg = loading => ({\n  type: REG_LIST_DELETING,\n  loading\n});\nexport const deleteRegSuccess = (regList, msg) => ({\n  type: REG_LIST_DELETE_SUCCESS,\n  regList,\n  msg\n});","map":{"version":3,"sources":["/Users/emily/cloudland/src/redux/actions/RegAction.jsx"],"names":["REG_LIST_FETCHED","REG_LIST_FILTER","REG_LIST_IS_FETCHING","REG_LIST_DELETE_FAILED","REG_LIST_DELETING","REG_LIST_DELETE_SUCCESS","regListApi","delRegInfor","filterRegList","keyword","type","fetchRegList","dispatch","fetchingRegList","then","res","console","log","fetchRegListSuccess","registrys","regList","loading","deleteReg","id","deletingReg","deleteRegSuccess","Msg","deleteRegFailed","catch","e","message","msg"],"mappings":"AAAA,SACEA,gBADF,EAEEC,eAFF,EAGEC,oBAHF,EAIEC,sBAJF,EAKEC,iBALF,EAMEC,uBANF,QAOO,6BAPP;AAQA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,yBAAxC;AACA,OAAO,MAAMC,aAAa,GAAIC,OAAD,KAAc;AACzCC,EAAAA,IAAI,EAAET,eADmC;AAEzCQ,EAAAA;AAFyC,CAAd,CAAtB;AAIP,OAAO,MAAME,YAAY,GAAG,MAAM;AAChC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACC,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAP,IAAAA,UAAU,GAAGQ,IAAb,CAAmBC,GAAD,IAAS;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,GAA7B,EADyB,CAEzB;;AACA,UAAIA,GAAJ,EAAS;AACPH,QAAAA,QAAQ,CAACC,eAAe,CAAC,KAAD,CAAhB,CAAR;AACAD,QAAAA,QAAQ,CAACM,mBAAmB,CAACH,GAAG,CAACI,SAAL,EAAgB,KAAhB,CAApB,CAAR,CAFO,CAGP;AACA;AACA;AACD;AACF,KAVD,EAFmB,CAanB;AACD,GAdD;AAeD,CAhBM;AAiBP,OAAO,MAAMD,mBAAmB,GAAG,CAACE,OAAD,EAAUC,OAAV,MAAuB;AACxDX,EAAAA,IAAI,EAAEV,gBADkD;AAExDoB,EAAAA,OAFwD;AAGxDC,EAAAA;AAHwD,CAAvB,CAA5B;AAKP,OAAO,MAAMR,eAAe,GAAIQ,OAAD,KAAc;AAC3CX,EAAAA,IAAI,EAAER,oBADqC;AAE3CmB,EAAAA;AAF2C,CAAd,CAAxB;AAKP,OAAO,MAAMC,SAAS,GAAIC,EAAD,IAAQ;AAC/B,SAAQX,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACY,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAjB,IAAAA,WAAW,CAACgB,EAAD,CAAX,CACGT,IADH,CACSC,GAAD,IAAS;AACb,UAAIA,GAAJ,EAAS;AACPH,QAAAA,QAAQ,CAACY,WAAW,CAAC,KAAD,CAAZ,CAAR;AACAZ,QAAAA,QAAQ,CAACa,gBAAgB,CAACV,GAAG,CAACI,SAAL,EAAgBJ,GAAG,CAACW,GAApB,CAAjB,CAAR;AACD,OAHD,MAGO;AACLd,QAAAA,QAAQ,CAACY,WAAW,CAAC,KAAD,CAAZ,CAAR;AACAZ,QAAAA,QAAQ,CAACe,eAAe,CAAE,qBAAoBJ,EAAG,EAAzB,CAAhB,CAAR;AACD,OAPY,CASb;;AACD,KAXH,EAYGK,KAZH,CAYUC,CAAD,IAAOjB,QAAQ,CAACe,eAAe,CAACE,CAAC,CAACC,OAAH,CAAhB,CAZxB;AAaD,GAfD;AAgBD,CAjBM;AAmBP,OAAO,MAAMH,eAAe,GAAIG,OAAD,KAAc;AAC3CpB,EAAAA,IAAI,EAAEP,sBADqC;AAE3C2B,EAAAA;AAF2C,CAAd,CAAxB;AAIP,OAAO,MAAMN,WAAW,GAAIH,OAAD,KAAc;AACvCX,EAAAA,IAAI,EAAEN,iBADiC;AAEvCiB,EAAAA;AAFuC,CAAd,CAApB;AAIP,OAAO,MAAMI,gBAAgB,GAAG,CAACL,OAAD,EAAUW,GAAV,MAAmB;AACjDrB,EAAAA,IAAI,EAAEL,uBAD2C;AAEjDe,EAAAA,OAFiD;AAGjDW,EAAAA;AAHiD,CAAnB,CAAzB","sourcesContent":["import {\n  REG_LIST_FETCHED,\n  REG_LIST_FILTER,\n  REG_LIST_IS_FETCHING,\n  REG_LIST_DELETE_FAILED,\n  REG_LIST_DELETING,\n  REG_LIST_DELETE_SUCCESS,\n} from \"../../constants/actionTypes\";\nimport { regListApi, delRegInfor } from \"../../service/registrys\";\nexport const filterRegList = (keyword) => ({\n  type: REG_LIST_FILTER,\n  keyword,\n});\nexport const fetchRegList = () => {\n  return (dispatch) => {\n    dispatch(fetchingRegList(true));\n    regListApi().then((res) => {\n      console.log(\"regAction-res\", res);\n      // let resData = res.data;\n      if (res) {\n        dispatch(fetchingRegList(false));\n        dispatch(fetchRegListSuccess(res.registrys, false));\n        //   } else {\n        //     //   dispatch(fetchingUserList(false));\n        //     //   dispatch(fetchUserListFailed(\"\b获取用户列表失败\"));\n      }\n    });\n    //   .catch((e) => dispatch(fetchUserListFailed(e.message)));\n  };\n};\nexport const fetchRegListSuccess = (regList, loading) => ({\n  type: REG_LIST_FETCHED,\n  regList,\n  loading,\n});\nexport const fetchingRegList = (loading) => ({\n  type: REG_LIST_IS_FETCHING,\n  loading,\n});\n\nexport const deleteReg = (id) => {\n  return (dispatch) => {\n    dispatch(deletingReg(true));\n    delRegInfor(id)\n      .then((res) => {\n        if (res) {\n          dispatch(deletingReg(false));\n          dispatch(deleteRegSuccess(res.registrys, res.Msg));\n        } else {\n          dispatch(deletingReg(false));\n          dispatch(deleteRegFailed(`\bFailed to delete ${id}`));\n        }\n\n        // this.loadData(this.state.current, this.state.pageSize);\n      })\n      .catch((e) => dispatch(deleteRegFailed(e.message)));\n  };\n};\n\nexport const deleteRegFailed = (message) => ({\n  type: REG_LIST_DELETE_FAILED,\n  message,\n});\nexport const deletingReg = (loading) => ({\n  type: REG_LIST_DELETING,\n  loading,\n});\nexport const deleteRegSuccess = (regList, msg) => ({\n  type: REG_LIST_DELETE_SUCCESS,\n  regList,\n  msg,\n});\n"]},"metadata":{},"sourceType":"module"}