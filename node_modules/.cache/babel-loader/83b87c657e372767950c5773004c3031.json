{"ast":null,"code":"/*\n\nCopyright <holder> All Rights Reserved\n\nSPDX-License-Identifier: Apache-2.0\n\n*/\nimport { OCP_LIST_IS_FETCHING, OCP_LIST_FETCHED, OCP_LIST_FILTER } from \"../../constants/actionTypes\";\nconst initialState = {\n  ocpList: [],\n  total: 0,\n  filteredList: [],\n  isLoading: false,\n  errorMessage: \"\",\n  keyword: \"\"\n};\n\nconst getFilteredList = (ocpList, keyword) => {\n  console.log(\"getFilteredOcpList-ocpList:\", ocpList);\n  console.log(\"getFilteredOcpList-keyword:\", keyword);\n  return ocpList.filter(item => item.ID.toString().indexOf(keyword) > -1 || item.BaseDomain.toLowerCase().indexOf(keyword) > -1 || item.ClusterName.toLowerCase().indexOf(keyword) > -1 || item.Flavor.toString().indexOf(keyword) > -1 || item.Haflag.toLowerCase().indexOf(keyword) > -1);\n};\n\nexport default function OcpReducer(state = initialState, action) {\n  console.log(\"initialState-state\", state);\n\n  switch (action.type) {\n    case OCP_LIST_IS_FETCHING:\n      return { ...state,\n        isLoading: action.loading\n      };\n\n    case OCP_LIST_FETCHED:\n      console.log(\"OCP_LIST_FETCHED\", action);\n      return { ...state,\n        ocpList: action.ocpList,\n        filteredList: getFilteredList(action.ocpList, state.keyword)\n      };\n\n    case OCP_LIST_FILTER:\n      console.log(\"OCP_LIST_FILTER-state\", state);\n      return { ...state,\n        keyword: action.keyword,\n        filteredList: getFilteredList(state.ocpList, action.keyword)\n      };\n\n    default:\n      return state;\n  }\n}\n_c = OcpReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"OcpReducer\");","map":{"version":3,"sources":["/Users/emily/cloudland/src/redux/reducers/OcpReducer.jsx"],"names":["OCP_LIST_IS_FETCHING","OCP_LIST_FETCHED","OCP_LIST_FILTER","initialState","ocpList","total","filteredList","isLoading","errorMessage","keyword","getFilteredList","console","log","filter","item","ID","toString","indexOf","BaseDomain","toLowerCase","ClusterName","Flavor","Haflag","OcpReducer","state","action","type","loading"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACEA,oBADF,EAEEC,gBAFF,EAGEC,eAHF,QAIO,6BAJP;AAMA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,KAAK,EAAE,CAFY;AAGnBC,EAAAA,YAAY,EAAE,EAHK;AAInBC,EAAAA,SAAS,EAAE,KAJQ;AAKnBC,EAAAA,YAAY,EAAE,EALK;AAMnBC,EAAAA,OAAO,EAAE;AANU,CAArB;;AAQA,MAAMC,eAAe,GAAG,CAACN,OAAD,EAAUK,OAAV,KAAsB;AAC5CE,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CR,OAA3C;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CH,OAA3C;AACA,SAAOL,OAAO,CAACS,MAAR,CACJC,IAAD,IACEA,IAAI,CAACC,EAAL,CAAQC,QAAR,GAAmBC,OAAnB,CAA2BR,OAA3B,IAAsC,CAAC,CAAvC,IACAK,IAAI,CAACI,UAAL,CAAgBC,WAAhB,GAA8BF,OAA9B,CAAsCR,OAAtC,IAAiD,CAAC,CADlD,IAEAK,IAAI,CAACM,WAAL,CAAiBD,WAAjB,GAA+BF,OAA/B,CAAuCR,OAAvC,IAAkD,CAAC,CAFnD,IAGAK,IAAI,CAACO,MAAL,CAAYL,QAAZ,GAAuBC,OAAvB,CAA+BR,OAA/B,IAA0C,CAAC,CAH3C,IAIAK,IAAI,CAACQ,MAAL,CAAYH,WAAZ,GAA0BF,OAA1B,CAAkCR,OAAlC,IAA6C,CAAC,CAN3C,CAAP;AAQD,CAXD;;AAYA,eAAe,SAASc,UAAT,CAAoBC,KAAK,GAAGrB,YAA5B,EAA0CsB,MAA1C,EAAkD;AAC/Dd,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCY,KAAlC;;AACA,UAAQC,MAAM,CAACC,IAAf;AACE,SAAK1B,oBAAL;AACE,aAAO,EACL,GAAGwB,KADE;AAELjB,QAAAA,SAAS,EAAEkB,MAAM,CAACE;AAFb,OAAP;;AAIF,SAAK1B,gBAAL;AACEU,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCa,MAAhC;AACA,aAAO,EACL,GAAGD,KADE;AAGLpB,QAAAA,OAAO,EAAEqB,MAAM,CAACrB,OAHX;AAILE,QAAAA,YAAY,EAAEI,eAAe,CAACe,MAAM,CAACrB,OAAR,EAAiBoB,KAAK,CAACf,OAAvB;AAJxB,OAAP;;AAMF,SAAKP,eAAL;AACES,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCY,KAArC;AACA,aAAO,EACL,GAAGA,KADE;AAELf,QAAAA,OAAO,EAAEgB,MAAM,CAAChB,OAFX;AAGLH,QAAAA,YAAY,EAAEI,eAAe,CAACc,KAAK,CAACpB,OAAP,EAAgBqB,MAAM,CAAChB,OAAvB;AAHxB,OAAP;;AAKF;AACE,aAAOe,KAAP;AAtBJ;AAwBD;KA1BuBD,U","sourcesContent":["/*\n\nCopyright <holder> All Rights Reserved\n\nSPDX-License-Identifier: Apache-2.0\n\n*/\nimport {\n  OCP_LIST_IS_FETCHING,\n  OCP_LIST_FETCHED,\n  OCP_LIST_FILTER,\n} from \"../../constants/actionTypes\";\n\nconst initialState = {\n  ocpList: [],\n  total: 0,\n  filteredList: [],\n  isLoading: false,\n  errorMessage: \"\",\n  keyword: \"\",\n};\nconst getFilteredList = (ocpList, keyword) => {\n  console.log(\"getFilteredOcpList-ocpList:\", ocpList);\n  console.log(\"getFilteredOcpList-keyword:\", keyword);\n  return ocpList.filter(\n    (item) =>\n      item.ID.toString().indexOf(keyword) > -1 ||\n      item.BaseDomain.toLowerCase().indexOf(keyword) > -1 ||\n      item.ClusterName.toLowerCase().indexOf(keyword) > -1 ||\n      item.Flavor.toString().indexOf(keyword) > -1 ||\n      item.Haflag.toLowerCase().indexOf(keyword) > -1\n  );\n};\nexport default function OcpReducer(state = initialState, action) {\n  console.log(\"initialState-state\", state);\n  switch (action.type) {\n    case OCP_LIST_IS_FETCHING:\n      return {\n        ...state,\n        isLoading: action.loading,\n      };\n    case OCP_LIST_FETCHED:\n      console.log(\"OCP_LIST_FETCHED\", action);\n      return {\n        ...state,\n\n        ocpList: action.ocpList,\n        filteredList: getFilteredList(action.ocpList, state.keyword),\n      };\n    case OCP_LIST_FILTER:\n      console.log(\"OCP_LIST_FILTER-state\", state);\n      return {\n        ...state,\n        keyword: action.keyword,\n        filteredList: getFilteredList(state.ocpList, action.keyword),\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}