{"ast":null,"code":"import { REG_LIST_FETCHED, REG_LIST_FILTER, REG_LIST_IS_FETCHING } from \"../../constants/actionTypes\";\nimport { regListApi, delRegInfor } from \"../../service/registrys\";\nexport const filterRegList = keyword => ({\n  type: REG_LIST_FILTER,\n  keyword\n});\nexport const fetchRegList = () => {\n  return dispatch => {\n    dispatch(fetchingRegList(true));\n    regListApi().then(res => {\n      console.log(\"regAction-res\", res); // let resData = res.data;\n\n      if (res) {\n        dispatch(fetchingRegList(false));\n        dispatch(fetchRegListSuccess(res.registrys, false)); //   } else {\n        //     //   dispatch(fetchingUserList(false));\n        //     //   dispatch(fetchUserListFailed(\"\b获取用户列表失败\"));\n      }\n    }); //   .catch((e) => dispatch(fetchUserListFailed(e.message)));\n  };\n};\nexport const fetchRegListSuccess = (regList, loading) => ({\n  type: REG_LIST_FETCHED,\n  regList,\n  loading\n});\nexport const fetchingRegList = loading => ({\n  type: REG_LIST_IS_FETCHING,\n  loading\n});\nexport const deleteReg = id => {\n  return dispatch => {\n    dispatch(deletingReg(true));\n    delRegInfor(id).then(res => {\n      if (res) {\n        dispatch(deletingReg(false));\n        dispatch(deleteRegSuccess(res.registrys));\n      } else {\n        dispatch(deletingReg(false));\n        dispatch(deleteRegFailed(`\bFailed to delete ${id}`));\n      }\n\n      message.success(res.Msg);\n      this.loadData(this.state.current, this.state.pageSize);\n    }).catch(e => dispatch(deleteRegFailed(e.message)));\n  };\n};","map":{"version":3,"sources":["/Users/emily/cloudland/src/redux/actions/RegAction.jsx"],"names":["REG_LIST_FETCHED","REG_LIST_FILTER","REG_LIST_IS_FETCHING","regListApi","delRegInfor","filterRegList","keyword","type","fetchRegList","dispatch","fetchingRegList","then","res","console","log","fetchRegListSuccess","registrys","regList","loading","deleteReg","id","deletingReg","deleteRegSuccess","deleteRegFailed","message","success","Msg","loadData","state","current","pageSize","catch","e"],"mappings":"AAAA,SACEA,gBADF,EAEEC,eAFF,EAGEC,oBAHF,QAIO,6BAJP;AAKA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,yBAAxC;AACA,OAAO,MAAMC,aAAa,GAAIC,OAAD,KAAc;AACzCC,EAAAA,IAAI,EAAEN,eADmC;AAEzCK,EAAAA;AAFyC,CAAd,CAAtB;AAIP,OAAO,MAAME,YAAY,GAAG,MAAM;AAChC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACC,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAP,IAAAA,UAAU,GAAGQ,IAAb,CAAmBC,GAAD,IAAS;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,GAA7B,EADyB,CAEzB;;AACA,UAAIA,GAAJ,EAAS;AACPH,QAAAA,QAAQ,CAACC,eAAe,CAAC,KAAD,CAAhB,CAAR;AACAD,QAAAA,QAAQ,CAACM,mBAAmB,CAACH,GAAG,CAACI,SAAL,EAAgB,KAAhB,CAApB,CAAR,CAFO,CAGP;AACA;AACA;AACD;AACF,KAVD,EAFmB,CAanB;AACD,GAdD;AAeD,CAhBM;AAiBP,OAAO,MAAMD,mBAAmB,GAAG,CAACE,OAAD,EAAUC,OAAV,MAAuB;AACxDX,EAAAA,IAAI,EAAEP,gBADkD;AAExDiB,EAAAA,OAFwD;AAGxDC,EAAAA;AAHwD,CAAvB,CAA5B;AAKP,OAAO,MAAMR,eAAe,GAAIQ,OAAD,KAAc;AAC3CX,EAAAA,IAAI,EAAEL,oBADqC;AAE3CgB,EAAAA;AAF2C,CAAd,CAAxB;AAKP,OAAO,MAAMC,SAAS,GAAIC,EAAD,IAAQ;AAC/B,SAAQX,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACY,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAjB,IAAAA,WAAW,CAACgB,EAAD,CAAX,CACGT,IADH,CACSC,GAAD,IAAS;AACb,UAAIA,GAAJ,EAAS;AACPH,QAAAA,QAAQ,CAACY,WAAW,CAAC,KAAD,CAAZ,CAAR;AACAZ,QAAAA,QAAQ,CAACa,gBAAgB,CAACV,GAAG,CAACI,SAAL,CAAjB,CAAR;AACD,OAHD,MAGO;AACLP,QAAAA,QAAQ,CAACY,WAAW,CAAC,KAAD,CAAZ,CAAR;AACAZ,QAAAA,QAAQ,CAACc,eAAe,CAAE,qBAAoBH,EAAG,EAAzB,CAAhB,CAAR;AACD;;AACDI,MAAAA,OAAO,CAACC,OAAR,CAAgBb,GAAG,CAACc,GAApB;AACA,WAAKC,QAAL,CAAc,KAAKC,KAAL,CAAWC,OAAzB,EAAkC,KAAKD,KAAL,CAAWE,QAA7C;AACD,KAXH,EAYGC,KAZH,CAYUC,CAAD,IAAOvB,QAAQ,CAACc,eAAe,CAACS,CAAC,CAACR,OAAH,CAAhB,CAZxB;AAaD,GAfD;AAgBD,CAjBM","sourcesContent":["import {\n  REG_LIST_FETCHED,\n  REG_LIST_FILTER,\n  REG_LIST_IS_FETCHING,\n} from \"../../constants/actionTypes\";\nimport { regListApi, delRegInfor } from \"../../service/registrys\";\nexport const filterRegList = (keyword) => ({\n  type: REG_LIST_FILTER,\n  keyword,\n});\nexport const fetchRegList = () => {\n  return (dispatch) => {\n    dispatch(fetchingRegList(true));\n    regListApi().then((res) => {\n      console.log(\"regAction-res\", res);\n      // let resData = res.data;\n      if (res) {\n        dispatch(fetchingRegList(false));\n        dispatch(fetchRegListSuccess(res.registrys, false));\n        //   } else {\n        //     //   dispatch(fetchingUserList(false));\n        //     //   dispatch(fetchUserListFailed(\"\b获取用户列表失败\"));\n      }\n    });\n    //   .catch((e) => dispatch(fetchUserListFailed(e.message)));\n  };\n};\nexport const fetchRegListSuccess = (regList, loading) => ({\n  type: REG_LIST_FETCHED,\n  regList,\n  loading,\n});\nexport const fetchingRegList = (loading) => ({\n  type: REG_LIST_IS_FETCHING,\n  loading,\n});\n\nexport const deleteReg = (id) => {\n  return (dispatch) => {\n    dispatch(deletingReg(true));\n    delRegInfor(id)\n      .then((res) => {\n        if (res) {\n          dispatch(deletingReg(false));\n          dispatch(deleteRegSuccess(res.registrys));\n        } else {\n          dispatch(deletingReg(false));\n          dispatch(deleteRegFailed(`\bFailed to delete ${id}`));\n        }\n        message.success(res.Msg);\n        this.loadData(this.state.current, this.state.pageSize);\n      })\n      .catch((e) => dispatch(deleteRegFailed(e.message)));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}